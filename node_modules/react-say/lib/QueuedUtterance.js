"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _createCustomEvent = _interopRequireDefault(require("./createCustomEvent"));

var _createDeferred = _interopRequireDefault(require("./createDeferred"));

var _createErrorEvent = _interopRequireDefault(require("./createErrorEvent"));

function speakUtterance(_x, _x2, _x3) {
  return _speakUtterance.apply(this, arguments);
}

function _speakUtterance() {
  _speakUtterance = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(ponyfill, utterance, startCallback) {
    var speechSynthesis, startDeferred, errorDeferred, endDeferred, startEvent, finishedSpeaking, endPromise, endEvent;
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            speechSynthesis = ponyfill.speechSynthesis;
            startDeferred = (0, _createDeferred["default"])();
            errorDeferred = (0, _createDeferred["default"])();
            endDeferred = (0, _createDeferred["default"])();
            utterance.addEventListener('end', endDeferred.resolve);
            utterance.addEventListener('error', errorDeferred.resolve);
            utterance.addEventListener('start', startDeferred.resolve); // if (speechSynthesis.speaking) {
            //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy before we call speak`);
            // }

            speechSynthesis.speak(utterance);
            _context4.next = 10;
            return Promise.race([errorDeferred.promise, startDeferred.promise]);

          case 10:
            startEvent = _context4.sent;

            if (!(startEvent.type === 'error')) {
              _context4.next = 13;
              break;
            }

            throw startEvent.error;

          case 13:
            endPromise = Promise.race([errorDeferred.promise, endDeferred.promise]);
            startCallback && startCallback( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
              return _regenerator["default"].wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      if (finishedSpeaking) {
                        _context3.next = 4;
                        break;
                      }

                      speechSynthesis.cancel();
                      _context3.next = 4;
                      return endPromise;

                    case 4:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3);
            })));
            _context4.next = 17;
            return endPromise;

          case 17:
            endEvent = _context4.sent;
            finishedSpeaking = true; // if (speechSynthesis.speaking) {
            //   console.warn(`ASSERTION: speechSynthesis.speaking should not be truthy after speak is stopped`);
            // }
            // console.debug(`ENDED: ${ utterance.text }`);

            if (!(endEvent.type === 'error')) {
              _context4.next = 21;
              break;
            }

            throw endEvent.error;

          case 21:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _speakUtterance.apply(this, arguments);
}

var QueuedUtterance = /*#__PURE__*/function () {
  function QueuedUtterance(ponyfill, utterance, _ref) {
    var onEnd = _ref.onEnd,
        onError = _ref.onError,
        onStart = _ref.onStart;
    (0, _classCallCheck2["default"])(this, QueuedUtterance);
    this._cancelled = false;
    this._deferred = (0, _createDeferred["default"])();
    this._onEnd = onEnd;
    this._onError = onError;
    this._onStart = onStart;
    this._ponyfill = ponyfill;
    this._speaking = false;
    this._utterance = utterance;
    this.promise = this._deferred.promise;
  }

  (0, _createClass2["default"])(QueuedUtterance, [{
    key: "cancel",
    value: function () {
      var _cancel = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this._cancelled = true;
                _context.t0 = this._cancel;

                if (!_context.t0) {
                  _context.next = 5;
                  break;
                }

                _context.next = 5;
                return this._cancel();

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function cancel() {
        return _cancel.apply(this, arguments);
      }

      return cancel;
    }()
  }, {
    key: "speak",
    value: function speak() {
      var _this = this;

      if (this._speaking) {
        console.warn("ASSERTION: QueuedUtterance is already speaking or has spoken.");
      }

      this._speaking = true;
      (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!_this._cancelled) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('cancelled');

              case 2:
                _context2.next = 4;
                return speakUtterance(_this._ponyfill, _this._utterance, function (cancel) {
                  if (_this._cancelled) {
                    cancel();
                    throw new Error('cancelled');
                  } else {
                    _this._cancel = cancel;
                    _this._onStart && _this._onStart((0, _createCustomEvent["default"])('start'));
                  }
                });

              case 4:
                if (!_this._cancelled) {
                  _context2.next = 6;
                  break;
                }

                throw new Error('cancelled');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))().then(function () {
        _this._onEnd && _this._onEnd((0, _createCustomEvent["default"])('end'));

        _this._deferred.resolve();
      }, function (error) {
        _this._onError && _this._onError((0, _createErrorEvent["default"])(error));

        _this._deferred.reject(error);
      });
      return this.promise;
    }
  }]);
  return QueuedUtterance;
}();

exports["default"] = QueuedUtterance;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,